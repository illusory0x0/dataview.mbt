// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/dataview"

// Values
fn read_uint16_be(ArrayView[Byte], Int) -> UInt

fn read_uint16_le(ArrayView[Byte], Int) -> UInt

fn read_uint32_be(ArrayView[Byte], Int) -> UInt

fn read_uint32_le(ArrayView[Byte], Int) -> UInt

fn write_uint16_be(ArrayView[Byte], Int, UInt) -> Unit

fn write_uint16_le(ArrayView[Byte], Int, UInt) -> Unit

fn write_uint32_be(ArrayView[Byte], Int, UInt) -> Unit

fn write_uint32_le(ArrayView[Byte], Int, UInt) -> Unit

// Errors

// Types and methods
pub struct DataView {
  data : ArrayView[Byte]
}
fn DataView::byte_length(Self) -> Int
fn DataView::byte_offset(Self) -> Int
fn DataView::check_bounds(Self, Int, Int) -> Unit
fn DataView::copy(Self) -> Self
fn DataView::from_bytes(ArrayView[Byte], offset? : Int, length? : Int?) -> Self
fn DataView::get_bytes(Self, Int, Int) -> ArrayView[Byte]
fn DataView::get_float32(Self, Int, little_endian? : Bool) -> Float
fn DataView::get_float64(Self, Int, little_endian? : Bool) -> Double
fn DataView::get_int16(Self, Int, little_endian? : Bool) -> Int
fn DataView::get_int32(Self, Int, little_endian? : Bool) -> Int
fn DataView::get_int8(Self, Int) -> Int
fn DataView::get_uint16(Self, Int, little_endian? : Bool) -> UInt
fn DataView::get_uint32(Self, Int, little_endian? : Bool) -> UInt
fn DataView::get_uint8(Self, Int) -> UInt
fn DataView::new(ArrayView[Byte], offset? : Int) -> Self
fn DataView::set_float32(Self, Int, Float, little_endian? : Bool) -> Unit
fn DataView::set_float64(Self, Int, Double, little_endian? : Bool) -> Unit
fn DataView::set_int16(Self, Int, Int, little_endian? : Bool) -> Unit
fn DataView::set_int32(Self, Int, Int, little_endian? : Bool) -> Unit
fn DataView::set_int8(Self, Int, Int) -> Unit
fn DataView::set_uint16(Self, Int, UInt, little_endian? : Bool) -> Unit
fn DataView::set_uint32(Self, Int, UInt, little_endian? : Bool) -> Unit
fn DataView::set_uint8(Self, Int, UInt) -> Unit
fn DataView::to_string(Self) -> String
impl Show for DataView

// Type aliases

// Traits

